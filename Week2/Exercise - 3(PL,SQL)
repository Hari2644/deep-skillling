CREATE TABLE SAVINGS_ACCOUNTS (
  ACCOUNT_ID NUMBER PRIMARY KEY,
  BALANCE NUMBER(10,2)
);

CREATE TABLE EMPLOYEES (
  EMP_ID NUMBER PRIMARY KEY,
  DEPARTMENT_ID NUMBER,
  SALARY NUMBER(10,2)
);

CREATE TABLE ACCOUNTS (
  ACCOUNT_ID NUMBER PRIMARY KEY,
  BALANCE NUMBER(10,2)
);
INSERT INTO SAVINGS_ACCOUNTS VALUES (1, 5000);
INSERT INTO SAVINGS_ACCOUNTS VALUES (2, 12000);
INSERT INTO SAVINGS_ACCOUNTS VALUES (3, 800);

INSERT INTO EMPLOYEES VALUES (101, 10, 55000);
INSERT INTO EMPLOYEES VALUES (102, 10, 60000);
INSERT INTO EMPLOYEES VALUES (103, 20, 45000);

INSERT INTO ACCOUNTS VALUES (201, 1000);
INSERT INTO ACCOUNTS VALUES (202, 5000);
INSERT INTO ACCOUNTS VALUES (203, 200);

COMMIT;

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
  UPDATE SAVINGS_ACCOUNTS
  SET BALANCE = BALANCE * 1.01;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(
  p_department_id IN NUMBER,
  p_bonus_percentage IN NUMBER
) IS
BEGIN
  UPDATE EMPLOYEES
  SET SALARY = SALARY + (SALARY * p_bonus_percentage/100)
  WHERE DEPARTMENT_ID = p_department_id;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE TransferFunds(
  p_source_account_id IN NUMBER,
  p_dest_account_id IN NUMBER,
  p_amount IN NUMBER
) IS
  v_balance NUMBER;
BEGIN
  -- Check balance
  SELECT BALANCE INTO v_balance
  FROM ACCOUNTS
  WHERE ACCOUNT_ID = p_source_account_id;

  IF v_balance >= p_amount THEN
    UPDATE ACCOUNTS
    SET BALANCE = BALANCE - p_amount
    WHERE ACCOUNT_ID = p_source_account_id;

    UPDATE ACCOUNTS
    SET BALANCE = BALANCE + p_amount
    WHERE ACCOUNT_ID = p_dest_account_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Transfer successful.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('Insufficient balance.');
  END IF;
END;
/




